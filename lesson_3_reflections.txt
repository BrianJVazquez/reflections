When would you want to use a remote repository rather than keeping all your work local?
When working with other people so that we dont have to meet up all the time to commit changes. Also, when you want to
back up your files from your local database.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If we pull automaticallly, any changes that someone else might have made during your time editing, might intefere with your current implementation of your project, where as if we manually see and accept the changes done in our remote repository, then we can save a great deal of trouble by avoiding errors.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
A fork is a clone of a repository and its history within the GitHub environment. A clone is a direct copy of a repository from one repository to another from a remote location or both locally. A branch is a new direction a project undertakes changes that wont affect the master branch so that an author can experiment or add different features separately. We can use a fork when we need to copy a repository within our GitHub workspace. We can also use a clone to copy a repository to your private workspace so that your clone wont be available publicly. Also, as for a branch, we can use a branch to add features that we can test before we add to the main workflow. 

What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit of havinga a last known state of a remote stored locally is that you can have the changes while you are currently editing and can commit without having to worry about merging conflicts.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would collaborate with others using google drive, one note, and dropbox by uploading updated files that I have changed and deleting old files. Though this was very time and space consuming, without GitHub, this was the solution that we had while working with our project. Without Git, I would save multiple projects and name them differently in order to assume version control. Git and GitHub is a much faster and effficient way to collaborate and follow version control practices in order to save time and make changes that I would probably not have done to other methods (google drive, etc.) of version control. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
I would want to make changes to a separate branch when I would be working with someone else and want to incorporate features that we would be testing off the main branch.